{
  "exception": {
    "impl": "La implementación usada no puede crear controles HelpControl."
  },
  "textHelp": {
    "help1": "Esta herramienta permite crear al vuelo una página HTML con la ayuda de los plugins y controles que tengan implementado el método 'getHelp' para obtener la ayuda de cada uno de ellos.",
    "help2": "Además permite mostrar a la ayuda contenido extra que añada el usuario."
  },
  "tooltip": "Ayuda",
  "help": "Ayuda",
  "short_title": "Ayuda API-CNIG",
  "long_title": "Ayuda API-CNIG",
  "tools": "Herramientas",
  "welcome0": "Visualizador realizado con la API-CNIG",
  "welcome1": "API CNIG es una herramienta que permite integrar de una forma muy sencilla un visualizador de mapas interactivo en cualquier página web y configurarlo consumiendo ficheros WMC, servicios WMS, servicios WFS, ficheros KML, etc. Además, provee la capacidad de añadir una gran cantidad de herramientas y controles.",
  "welcome2": "Código API-CNIG",
  "welcome3": "Enlace al repositorio",
  "welcome4": "Galería de plugins",
  "welcome5": "Enlace a la galería de plugins",
  "welcome6": "Enlace a la Wiki de API-CNIG",
  "welcome7": "Galería de ejemplos",
  "welcome8": "Enlace a la galería de ejemplos",
  "welcome9": "Recursos Formativos",
  "welcome10": "Enlace a los recursos formativos",
  "tools1": "La API-CNIG cuenta con una serie de herramientas que permiten interactuar con la información que se ofrece en el visualizador:",
  "tools2": "Los controles son las herramientas que incluye el mapa y que permiten trabajar con él. Por ejemplo, podemos tener un control que dibuje la escala en el mapa, otro que ofrezca una selección de capas base de fondo del mapa, otro que vaya mostrando las coordenadas del cursor, etc.",
  "tools3": "Los plugins o extensiones son funcionalidades que ofrecen utilidades específicas que, a diferencia de los controles básicos, suelen usarse en escenarios concretos, por lo que se separan del core o núcleo principal de la API para no penalizar con su descarga a quien no los necesite.",
  "tools4": "Por ejemplo, se agruparían en un mismo plugin aquellos controles que, aunque ofrezcan funcionalidades atómicas diferentes, funcionen en grupo sobre una misma capa vectorial. De esta manera, se optimiza la gestión de la información y los elementos comunes que comparten.",
  "write": "Escribe aquí",
  "search": "Buscar",
  "pdf": "Descargar en pdf"
}